[gd_resource type="VisualShader" load_steps=18 format=3 uid="uid://bhewrs5mmfurm"]

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_myxar"]
parameter_name = "day_night"
qualifier = 1

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_3jlpo"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(0, 0, 0), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_4kjlp"]
parameter_name = "highlighted_color"
qualifier = 1

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_weh2x"]
parameter_name = "destination_color"
qualifier = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_s71r0"]
size = Vector2(604.463, 404.309)
expression = "result = main_color;
if ( distance(main_color, vec3(1,1,1)) > 0.1
  && distance(highlight, vec3(0,0,0)) > 0.1
  && distance(highlight, main_color) > 0.1
  && distance(destination, main_color) > 0.1) {
	float mean = (main_color.r + main_color.g + main_color.b) / 3.0;
	result = vec3(mean,mean,mean);
}"

[sub_resource type="VisualShaderNodeParameterRef" id="VisualShaderNodeParameterRef_oaw0a"]
parameter_name = "day_night"
param_type = 3

[sub_resource type="VisualShaderNodeParameterRef" id="VisualShaderNodeParameterRef_4jfah"]
parameter_name = "highlighted_color"
param_type = 8

[sub_resource type="VisualShaderNodeParameterRef" id="VisualShaderNodeParameterRef_0rlo8"]
parameter_name = "destination_color"
param_type = 8

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_7wses"]
parameter_name = "map"
texture_filter = 1

[sub_resource type="VisualShaderNodeParameterRef" id="VisualShaderNodeParameterRef_q24nw"]
parameter_name = "quality"
param_type = 1

[sub_resource type="VisualShaderNodeParameterRef" id="VisualShaderNodeParameterRef_hivog"]
parameter_name = "day_night"
param_type = 3

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_hy8oc"]
size = Vector2(730.8, 766.464)
expression = "color = texture(map,UV);
dist = quality ;

if (distance(color,destination) < 0.1){
	border += border * cos(TIME*2.0)/4.0;
}
vec2 search_radius = vec2(textureSize(map,0))/border;

if (distance(color,vec4(1.0,1.0,1.0,1.0))>0.01){
	dist = quality-1 ;
	for (int i=8; i>0; --i){
		float angle = float(i)*PI/4.0 ;
		vec2 texel = UV + vec2(cos(angle),sin(angle))/search_radius ;
	
		if (distance(texture(map,texel),color)>=0.01){
			dist = min(dist,quality);
		
			for(int j=1; j < dist ; ++j){
				float ratio = float(j)/float(quality);
				texel = UV +vec2(cos(angle),sin(angle))*vec2(ratio,ratio)/search_radius ;
			
				if (distance(texture(map,texel),color)>=0.01){
					dist = j;
				}
			}
		}
	}
}
"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_84cyq"]
parameter_name = "border"
hint = 1
min = 2.0
max = 100.0

[sub_resource type="VisualShaderNodeIntParameter" id="VisualShaderNodeIntParameter_lgm3c"]
parameter_name = "quality"
hint = 1
min = 1
max = 7

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_wlg40"]
operator = 3

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_hthud"]
function = 31

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_heoy5"]
default_input_values = [0, Vector3(0.9, 0.9, 0.9), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform int quality : hint_range(1, 7);
global uniform bool day_night;
global uniform vec4 highlighted_color : source_color;
global uniform vec4 destination_color : source_color;
uniform sampler2D map : filter_nearest;
uniform float border : hint_range(2, 100);



void fragment() {
// ParameterRef:24
	bool n_out24p0 = day_night;


// ParameterRef:18
	vec3 n_out18p0 = highlighted_color.rgb;
	float n_out18p1 = highlighted_color.a;


// ParameterRef:19
	vec3 n_out19p0 = destination_color.rgb;
	float n_out19p1 = destination_color.a;


// FloatParameter:5
	float n_out5p0 = border;


// IntParameter:6
	int n_out6p0 = quality;


// ColorParameter:12
	vec4 n_out12p0 = highlighted_color;


// ColorParameter:13
	vec4 n_out13p0 = destination_color;


	vec4 n_out4p0;
	int n_out4p1;
// Expression:4
	n_out4p0 = vec4(0.0, 0.0, 0.0, 0.0);
	n_out4p1 = 0;
	{
		n_out4p0 = texture(map,UV);
		n_out4p1 = n_out6p0 ;
		
		if (distance(n_out4p0,n_out13p0) < 0.1){
			n_out5p0 += n_out5p0 * cos(TIME*2.0)/4.0;
		}
		vec2 search_radius = vec2(textureSize(map,0))/n_out5p0;
		
		if (distance(n_out4p0,vec4(1.0,1.0,1.0,1.0))>0.01){
			n_out4p1 = n_out6p0-1 ;
			for (int i=8; i>0; --i){
				float angle = float(i)*PI/4.0 ;
				vec2 texel = UV + vec2(cos(angle),sin(angle))/search_radius ;
			
				if (distance(texture(map,texel),n_out4p0)>=0.01){
					n_out4p1 = min(n_out4p1,n_out6p0);
				
					for(int j=1; j < n_out4p1 ; ++j){
						float ratio = float(j)/float(n_out6p0);
						texel = UV +vec2(cos(angle),sin(angle))*vec2(ratio,ratio)/search_radius ;
					
						if (distance(texture(map,texel),n_out4p0)>=0.01){
							n_out4p1 = j;
						}
					}
				}
			}
		}
		
	}


// BooleanParameter:10
	bool n_out10p0 = day_night;


	vec3 n_out14p0;
// Expression:14
	n_out14p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out14p0 = vec3(n_out4p0.xyz);
		if ( distance(vec3(n_out4p0.xyz), vec3(1,1,1)) > 0.1
		  && distance(n_out18p0, vec3(0,0,0)) > 0.1
		  && distance(n_out18p0, vec3(n_out4p0.xyz)) > 0.1
		  && distance(n_out19p0, vec3(n_out4p0.xyz)) > 0.1) {
			float mean = (vec3(n_out4p0.xyz).r + vec3(n_out4p0.xyz).g + vec3(n_out4p0.xyz).b) / 3.0;
			n_out14p0 = vec3(mean,mean,mean);
		}
	}


// ParameterRef:20
	int n_out20p0 = quality;


// FloatOp:7
	float n_out7p0 = float(n_out4p1) / float(n_out20p0);


// FloatFunc:8
	float n_out8p0 = 1.0 - n_out7p0;


// Mix:9
	vec3 n_out9p0 = mix(vec3(n_out24p0 ? 1.0 : 0.0), n_out14p0, vec3(n_out8p0));


// ParameterRef:16
	bool n_out16p0 = day_night;


// Mix:11
	vec3 n_in11p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out11p0 = mix(n_out9p0, n_in11p1, vec3(n_out16p0 ? 1.0 : 0.0));


// Output:0
	ALBEDO = n_out9p0;
	EMISSION = n_out11p0;


}
"
graph_offset = Vector2(-527.368, -245.71)
nodes/fragment/0/position = Vector2(600, 60)
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture2DParameter_7wses")
nodes/fragment/2/position = Vector2(-1800, -600)
nodes/fragment/4/node = SubResource("VisualShaderNodeExpression_hy8oc")
nodes/fragment/4/position = Vector2(-1400, -200)
nodes/fragment/4/size = Vector2(730.8, 766.464)
nodes/fragment/4/input_ports = "0,8,map;1,0,border;2,1,quality;3,5,highlight;4,5,destination;"
nodes/fragment/4/output_ports = "0,5,color;1,1,dist;"
nodes/fragment/4/expression = "color = texture(map,UV);
dist = quality ;

if (distance(color,destination) < 0.1){
	border += border * cos(TIME*2.0)/4.0;
}
vec2 search_radius = vec2(textureSize(map,0))/border;

if (distance(color,vec4(1.0,1.0,1.0,1.0))>0.01){
	dist = quality-1 ;
	for (int i=8; i>0; --i){
		float angle = float(i)*PI/4.0 ;
		vec2 texel = UV + vec2(cos(angle),sin(angle))/search_radius ;
	
		if (distance(texture(map,texel),color)>=0.01){
			dist = min(dist,quality);
		
			for(int j=1; j < dist ; ++j){
				float ratio = float(j)/float(quality);
				texel = UV +vec2(cos(angle),sin(angle))*vec2(ratio,ratio)/search_radius ;
			
				if (distance(texture(map,texel),color)>=0.01){
					dist = j;
				}
			}
		}
	}
}
"
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatParameter_84cyq")
nodes/fragment/5/position = Vector2(-1800, -300)
nodes/fragment/6/node = SubResource("VisualShaderNodeIntParameter_lgm3c")
nodes/fragment/6/position = Vector2(-1800, -60)
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatOp_wlg40")
nodes/fragment/7/position = Vector2(-400, 120)
nodes/fragment/8/node = SubResource("VisualShaderNodeFloatFunc_hthud")
nodes/fragment/8/position = Vector2(-240, 160)
nodes/fragment/9/node = SubResource("VisualShaderNodeMix_heoy5")
nodes/fragment/9/position = Vector2(200, 80)
nodes/fragment/10/node = SubResource("VisualShaderNodeBooleanParameter_myxar")
nodes/fragment/10/position = Vector2(-920, -340)
nodes/fragment/11/node = SubResource("VisualShaderNodeMix_3jlpo")
nodes/fragment/11/position = Vector2(400, 160)
nodes/fragment/12/node = SubResource("VisualShaderNodeColorParameter_4kjlp")
nodes/fragment/12/position = Vector2(-1800, 180)
nodes/fragment/13/node = SubResource("VisualShaderNodeColorParameter_weh2x")
nodes/fragment/13/position = Vector2(-1800, 340)
nodes/fragment/14/node = SubResource("VisualShaderNodeExpression_s71r0")
nodes/fragment/14/position = Vector2(-520, -340)
nodes/fragment/14/size = Vector2(604.463, 404.309)
nodes/fragment/14/input_ports = "0,4,highlight;1,4,destination;2,4,main_color;3,6,day_night;"
nodes/fragment/14/output_ports = "0,4,result;"
nodes/fragment/14/expression = "result = main_color;
if ( distance(main_color, vec3(1,1,1)) > 0.1
  && distance(highlight, vec3(0,0,0)) > 0.1
  && distance(highlight, main_color) > 0.1
  && distance(destination, main_color) > 0.1) {
	float mean = (main_color.r + main_color.g + main_color.b) / 3.0;
	result = vec3(mean,mean,mean);
}"
nodes/fragment/16/node = SubResource("VisualShaderNodeParameterRef_oaw0a")
nodes/fragment/16/position = Vector2(120, 240)
nodes/fragment/18/node = SubResource("VisualShaderNodeParameterRef_4jfah")
nodes/fragment/18/position = Vector2(-860, -580)
nodes/fragment/19/node = SubResource("VisualShaderNodeParameterRef_0rlo8")
nodes/fragment/19/position = Vector2(-860, -460)
nodes/fragment/20/node = SubResource("VisualShaderNodeParameterRef_q24nw")
nodes/fragment/20/position = Vector2(-660, 220)
nodes/fragment/24/node = SubResource("VisualShaderNodeParameterRef_hivog")
nodes/fragment/24/position = Vector2(-120, 80)
nodes/fragment/connections = PackedInt32Array(2, 0, 4, 0, 5, 0, 4, 1, 6, 0, 4, 2, 4, 1, 7, 0, 8, 0, 9, 2, 7, 0, 8, 0, 11, 0, 0, 5, 9, 0, 11, 0, 12, 0, 4, 3, 13, 0, 4, 4, 16, 0, 11, 2, 18, 0, 14, 0, 4, 0, 14, 2, 19, 0, 14, 1, 20, 0, 7, 1, 10, 0, 14, 3, 24, 0, 9, 0, 9, 0, 0, 0, 14, 0, 9, 1)
