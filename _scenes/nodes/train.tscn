[gd_scene load_steps=4 format=3 uid="uid://bo70n755f56k8"]

[ext_resource type="Material" uid="uid://bmvxgs0acpoba" path="res://models/red.tres" id="1_o3xro"]

[sub_resource type="GDScript" id="GDScript_khru8"]
script/source = "extends PathFollow3D

@export var speed : float = 50 # m/s
@export var zero_to_max_time : float = 1 # s
@export var ping_pong : bool = false
@export var pause_at_end : float = 2 # s
@export var backward : bool = false


var current_speed : float = 0
@onready var zero_to_max_distance : float = 0 if (zero_to_max_time == 0) else speed / 2 * zero_to_max_time
@onready var path_distance = $\"..\".curve.get_baked_length()
const forward_h_offset : float = 6
const very_close_threshold : float = 1


# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	if (backward):
		h_offset = -forward_h_offset
	else:
		h_offset = +forward_h_offset


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	if (paused()):
		manage_end_point(delta)
	else:
		update_speed(delta)
		progress += delta * current_speed * (-1 if backward else 1)
		if acceleration <= 0 and (very_close_to_end() or very_close_to_start()):
			current_pause = pause_at_end


var acceleration : float = 0
func update_speed(delta : float) -> void:
	var lerp_result : float = speed * (delta / zero_to_max_time)

	# slow down
	if (not backward and close_to_end()) or (backward and close_to_start()):
		acceleration = -lerp_result
		current_speed += acceleration
		current_speed = max(current_speed, 0.0)
	# speed up
	elif (backward and close_to_end()) or (not backward and close_to_start()):
		acceleration = +lerp_result
		current_speed += acceleration
		current_speed = min(current_speed, speed)
	else:
		current_speed = speed


var current_pause = 0
func manage_end_point(delta) -> void:
	if not paused():
		return
	
	if current_pause - delta <= 0:
		if ping_pong:
			print(name, \" changed its direction for PING_PONG algorithm.\")
			if backward:
				backward = false
				h_offset = forward_h_offset
				progress_ratio = 0 # 0%
			else:
				backward = true
				h_offset = -forward_h_offset
				progress_ratio = 1 # 100%
		else:
			print(name, \" changed looped for LOOP algorithm.\")
			progress = very_close_threshold if not backward else path_distance - very_close_threshold
		current_pause = 0
		update_speed(delta)
	else:
		current_pause -= delta


func follower_position(follower_offset) -> float:
	if ping_pong and backward and progress + follower_offset > path_distance:
		var _offset = (progress + follower_offset) - path_distance
		return path_distance - _offset
	elif ping_pong and not backward and progress - follower_offset < 0:
		return abs(progress - follower_offset)
	else:
		if (backward):
			return progress + follower_offset
		else:
			return progress - follower_offset


func follower_h_offset(follower_offset) -> float:
	if ping_pong and backward and progress + follower_offset > path_distance:
		return -h_offset
	elif ping_pong and not backward and progress - follower_offset < 0:
		return -h_offset
	else:
		return h_offset


func close_to_end() -> bool:
	return path_distance - progress < zero_to_max_distance
func close_to_start() -> bool:
	return progress < zero_to_max_distance
func very_close_to_end() -> bool:
	return path_distance - progress <= very_close_threshold
func very_close_to_start() -> bool:
	return progress <= very_close_threshold
func paused() -> bool:
	return current_pause > 0
"

[sub_resource type="BoxMesh" id="BoxMesh_72xdt"]

[node name="Train" type="PathFollow3D"]
rotation_mode = 1
tilt_enabled = false
script = SubResource("GDScript_khru8")

[node name="MeshInstance3D5" type="MeshInstance3D" parent="."]
transform = Transform3D(10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 5, 0)
mesh = SubResource("BoxMesh_72xdt")
surface_material_override/0 = ExtResource("1_o3xro")
