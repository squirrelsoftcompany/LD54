[gd_scene load_steps=4 format=3 uid="uid://bo70n755f56k8"]

[ext_resource type="PackedScene" uid="uid://ddkgdl7efyd1l" path="res://_scenes/trains/tgv.tscn" id="2_ptbhe"]
[ext_resource type="PackedScene" uid="uid://sqn3liqmbahg" path="res://_scenes/trains/locomotive.tscn" id="2_v6wj6"]

[sub_resource type="GDScript" id="GDScript_khru8"]
script/source = "extends PathFollow3D


@onready var ps_tgv_speed : float = ProjectSettings.get_setting(\"specific/train/tgv_speed\", 25) # m/s
@onready var ps_locomotive_speed : float = ProjectSettings.get_setting(\"specific/train/locomotive_speed\", 25) # m/s
@onready var ps_forward_h_offset : float = ProjectSettings.get_setting(\"specific/train/forward_h_offset\", 6) # m
@onready var ps_very_close_threshold : float = ProjectSettings.get_setting(\"specific/train/very_close_threshold\", 1) # m
@onready var ps_zero_to_max_time : float = ProjectSettings.get_setting(\"specific/train/zero_to_max_time\", 1) # s
@onready var ps_wagon_offset : float = ProjectSettings.get_setting(\"specific/wagon/offset\", 10) # m


@export_category(\"Train\")
@export var is_tgv := false
@export_range(1, 10) var wagon_count := 3
@export_subgroup(\"train mode\")
@export var ping_pong : bool = false
@export var backward : bool = false
@export_subgroup(\"train pause\")
@export_range(0, 5) var pause_at_end : float = 2


@onready var speed_max := ps_tgv_speed if (is_tgv) else ps_locomotive_speed
@onready var zero_to_max_distance : float = 0.0 if (ps_zero_to_max_time == 0) else speed_max / 2 * ps_zero_to_max_time
@onready var path_distance : float = $\"..\".curve.get_baked_length()
@onready var wagon_followpath := preload(\"res://_scenes/nodes/wagon_followpath.tscn\")
var current_speed : float = 0
var model: Node3D = null
@onready var model_tgv: Node3D = $TGV
@onready var model_locomotive: Node3D = $Locomotive


# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	# free useless model
	if (not is_tgv):
		$TGV.queue_free()
		model = $Locomotive
	else:
		$Locomotive.queue_free()
		model = $TGV

	# setup train
	if (backward):
		h_offset = -ps_forward_h_offset
		set_model_rotation(180)
	else:
		h_offset = +ps_forward_h_offset
		set_model_rotation(0)

	# setup wagon
	for i in wagon_count:
		var wagon = wagon_followpath.instantiate()
		get_parent().add_child.call_deferred(wagon, true, Node.INTERNAL_MODE_BACK)
		wagon.train = self
		wagon.offset = ps_wagon_offset * (i+1)


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	if (is_currently_paused):
		manage_end_point(delta)
	else:
		update_speed(delta)
		progress += delta * current_speed * (-1 if backward else 1)
		if not is_currently_paused and relative_very_close_to_end():
			is_currently_paused = true
			current_pause = pause_at_end


var acceleration : float = 0
func update_speed(delta : float) -> void:
	var lerp_result : float = speed_max * (delta / ps_zero_to_max_time)

	if (pause_at_end > 0):
		# slow down
		if relative_close_to_end():
			acceleration = -lerp_result
			current_speed += acceleration
			current_speed = max(current_speed, 0.0)
		# speed up
		elif relative_close_to_start():
			acceleration = +lerp_result
			current_speed += acceleration
			current_speed = min(current_speed, speed_max)
		else:
			current_speed = speed_max
	else:
		current_speed = speed_max


var current_pause := 0.0
var is_currently_paused := false
func manage_end_point(delta) -> void:
	if not is_currently_paused:
		return
	
	if current_pause - delta <= 0:
		if ping_pong:
			if backward:
				backward = false
				h_offset = +ps_forward_h_offset
				set_model_rotation(0)
				progress_ratio = 0 # 0%
			else:
				backward = true
				h_offset = -ps_forward_h_offset
				set_model_rotation(180)
				progress_ratio = 1 # 100%
		else:
			progress = ps_very_close_threshold if not backward else path_distance - ps_very_close_threshold
		current_pause = 0
		is_currently_paused = false
		update_speed(delta)
	else:
		current_pause -= delta


func follower_position(follower_offset) -> float:
	if ping_pong and backward and progress + follower_offset > path_distance:
		var _offset = (progress + follower_offset) - path_distance
		return path_distance - _offset
	elif ping_pong and not backward and progress - follower_offset < 0:
		return abs(progress - follower_offset)
	else:
		if (backward):
			return progress + follower_offset
		else:
			return progress - follower_offset


func follower_h_offset(follower_offset) -> float:
	if ping_pong and backward and progress + follower_offset > path_distance:
		return -h_offset
	elif ping_pong and not backward and progress - follower_offset < 0:
		return -h_offset
	else:
		return h_offset


func follower_rotation_y(follower_offset) -> float:
	if ping_pong and backward and progress + follower_offset > path_distance:
		return 0
	elif ping_pong and not backward and progress - follower_offset < 0:
		return 180
	else:
		return 180 if backward else 0


func set_model_rotation(y):
	if (model):
		model.rotation_degrees = Vector3(0, y, 0)


func close_to_end() -> bool:
	return path_distance - progress < zero_to_max_distance
func close_to_start() -> bool:
	return progress < zero_to_max_distance
func relative_close_to_end() -> bool:
	return (not backward and close_to_end()) or (backward and close_to_start())
func relative_close_to_start() -> bool:
	return (backward and close_to_end()) or (not backward and close_to_start())
func very_close_to_end() -> bool:
	return path_distance - progress <= ps_very_close_threshold
func very_close_to_start() -> bool:
	return progress <= ps_very_close_threshold
func relative_very_close_to_end() -> bool:
	return (not backward and very_close_to_end()) or (backward and very_close_to_start())
"

[node name="Train" type="PathFollow3D"]
rotation_mode = 1
tilt_enabled = false
script = SubResource("GDScript_khru8")

[node name="Locomotive" parent="." instance=ExtResource("2_v6wj6")]

[node name="TGV" parent="." instance=ExtResource("2_ptbhe")]
